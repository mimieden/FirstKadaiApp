//: Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"

// コメントはこの形式で記述する

// 1日が何秒かの計算 ( * は乗算)
24 * 60 * 60

// 定数の宣言 (let 定数名: 型 = 値)
let value1 = 50

// 変数の宣言 (変数名: 型 = 値)
var value2 = 50

// Swiftの基本的な方には数値型、論理型、文字列型などがある
// 数値型 - 整数型 Int,UInt,Int8、扱うことのできる数値の範囲が異なる、通常はIntでOK (型指定ない場合はInt)
let value3: Int = 50
// 数値型 - 少数型 Double(64ビット長)、Float(32ビット長)、通常はDoubleでOK (型指定ない場合はDouble)
let value4: Double = 50.1
let value5: Float = 50.1
// 論理型 - Bool型ともよばれ、trueかfaleseの2値をとる (テキストでは型指定なしでも記載あり Lesson3 4.4)
let value6 = true
let value7: Bool = false
// 文字列型 - Stringで指定、ダブルクォーテーションで囲まれた文字列を文字列型として扱う
let str1 = "Hello World"
let str2: String = "Hello World"

// 型による違い
var sum1 = 1 + 2
var sum2 = "1" + "2"
var sum3 = "1 + 2"

// 型推論 - Intを使いたい場合
let value10 = 1
let value11: Int = 1

// 型推論 - Doubleを扱いたい場合
let value12 = 1.0
let value13: Double = 1

// print関数
let value14 = 50
print (value14)
print ("Swift")

// print関数で文字列と変数の中身を一緒に出力
// \は(option + ¥)
let price = 100
print ("値段は\(price)円です")

// 演算子とは式で実行する演算を指定する記号
// 代入演算子 - 変数や定数に値を代入する演算子
var value20 = 2
// 算術演算子 - 四則演算など数値を計算する場合に使用する演算子
1 + 2  // + 足し算
5 - 3  // - 引き算
3 * 4  // * 掛け算
8 / 2  // / 割り算
8 % 3  // % 余り算
// 代入演算子と算術演算子の組み合わせ
var value21 = 2
value21 = value21 + 3
value21 += 3          // AにBを加えてAに代入
value21 -= 1          // AからBを引いてAに代入
value21 *= 6          // AにBを掛けてAに代入
value21 /= 7          // AをBで割ってAに代入
value21 %= 4          // AをBで割ってAに代入
// 比較演算子 演算子の条件を満たすとtrue、満たさないとfalse
// A > B   Aの方がBより大きい
// A < B   Aの方がBより小さい
// A >= B  AはB以上
// A <= B  AはB以下
// A == B  AとBは等しい
// A != B  AとBは等しくない
let value_3 = 3
let value_4 = 4
let value_6 = 6
let value_three = 3
print (value_3 > value_4)
print (value_3 < value_6)
print (value_3 >= value_three)
print (value_4 <= value_6)
print (value_3 == value_three)
print (value_3 != value_three)

// 論理演算子 Bool型の演算を行う
// A && B  AかつBがともにtrueのときにtrue
// A || B  AまたはBのどちらか一方でもtrueのときにtrue
// !A      Aがtrueならfalse、Aがfalseならtrue
let value_t = true
let value_f = false
print (value_t && value_f)
print (value_t || value_f)
print (!value_t)
print (!value_f)
// 範囲演算子 連続した値の範囲を指定する
// A..<B   AからBまでの値、Bを含まない
// A...B   AからBまでの値、Bを含む
let value_10 = 10
for value_10 in (1 ..< 3){
    print ("swift")
}
// 三項演算子
// 条件? 式1: 式2 条件が満たされれば式1を、満たされなければ式2を返す
let value_13 = 13
let value_24 = 24
print ((value_13 % 2 == 0) ? "偶数" : "奇数")
print ((value_24 % 2 == 0) ? "偶数" : "奇数")

// 4.10 条件分岐
// if 条件式1 {
//     条件式1がtrueの時に実行される処理
// } else if 条件式2 {
//     条件式2がtrueの時に実行される処理
// } else {
//     どの条件式もtrueでなかったときに実行される処理
// }
let value30 = 100
if value30 >= 90 {
    print("優")
} else if value30 >= 75 {
    print("良")
} else if value30 >= 60 {
    print("可")
} else {
    print("不可")
}
// 4.11 swich文 式を記述し、その後ろにcase文で値を指定してその値と等しい場合に処理を実行させる
// 範囲演算子を使うこともできる
// switch 式 {
// case 値 :
//     処理 1
// case 値 :
//     処理 2
// case 値, 値 :
//     処理 3
// default:
//     処理 4
// }
let value31 = -10
switch value31 {
case 0..<50:
    print("処理1")
case 50..<100:
    print("処理2")
case 100..<150:
    print("処理3")
default:
    print("処理4")
}

let drink = "juice"
switch drink {
case "coffee":
    print("200円")
case "tea":
    print("300円")
case "milk":
    print("150円")
default:
    print("取り扱いなし")
}

// 4.12 繰り返し処理
// for　- in文 範囲演算子を使うことで指定した範囲の値を順番に変数に代入して処理を行う
// for 変数 in 開始値 ... 終了値 {
//     処理
// }
// for 変数 in 開始値 ..< 終了値 {
//     処理
// }
var value40 = 0                        //初期値は関係ない
for value40 in 3 ... 6 {               //3~6までを代入して
    print ("\(value40)回目 Swift for文")      //結果を出力
}
// while文 式が満たされる間処理を繰り返す
// while 条件式 {
//     処理
// }
var value41 = 3                        //開始したい値を初期値
while value41 < 7 {                    //終了したい値
    print ("\(value41)回目 Swift while文")
    value41 += 1                       //インクリメント
}